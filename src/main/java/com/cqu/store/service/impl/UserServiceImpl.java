package com.cqu.store.service.impl;

import com.cqu.store.entity.User;
import com.cqu.store.mapper.UserMapper;
import com.cqu.store.service.IUserService;
import com.cqu.store.service.ex.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.DigestUtils;

import java.util.Date;
import java.util.UUID;

@Service
public class UserServiceImpl implements IUserService {
    @Autowired
    private UserMapper userMapper;

    @Override
    public void reg(User user) {
        String username = user.getUsername();
        //????findByUsername?§Ø???????????
        User result = userMapper.findByUsername(username);
        if (result != null) {
            //????????????????????
            throw new UsernameDuplicatedException("this name has been used!");
        }
        //??????????  md5?????????
        //???+????+???  =========????????????????????
        String oldPassword = user.getPassword();
        //?????????????????
        String salt = UUID.randomUUID().toString().toUpperCase();
        //???????????????
        user.setSalt(salt);

        //???????????????????????
        String md5password = getMD5Password(oldPassword, salt);
        //?????????????????User??
        user.setPassword(md5password);

        //??????,?????????????????????????
        //????????is_delete=0
        user.setIsDelete(0);
        //???4???????
        user.setCreatedUser(user.getAvatar());
        user.setModifiedUser(user.getUsername());
        Date date = new Date();
        user.setCreatedTime(date);
        user.setModifiedTime(date);

        //?????????
        Integer flag = userMapper.insert(user);
        if (flag != 1) {
            throw new InsertException("new user wrong!");
        }
    }

    @Override
    public User login(String username, String password) {
        //?????????????????????????????????????????????????
        User result = userMapper.findByUsername(username);

        if (result == null) {
            throw new UserNotFoundException("user not found!");
        }
        //????????????????
        //1.????????????§Ö????????????
        String oldpassword = result.getPassword();
        //2.?????????????§Ò??
        //2.1 ???????
        String salt = result.getSalt();
        //2.2 ??????????????????md5?????§Þ???
        String newMd5Password = getMD5Password(password, salt);

        if (!newMd5Password.equals(oldpassword)) {
            throw new PasswordNotMatchException("wrong password !");
        }
        //?§Ø?id_delete??¦Å??????1??????????????
        if (result.getIsDelete() == 1) {
            throw new UserNotFoundException("user not found!");
        }

        //????mapper???findbyusername?????
        User user = new User();
        user.setUid(result.getUid());
        user.setUsername(result.getUsername());
        user.setAvatar(result.getAvatar());
        user.setPassword(result.getPassword());
        user.setGender(result.getGender());
        //?????????
        return user;
    }

    @Override
    public void changerPassword(Integer uid, String username, String oldPassword, String newPassword) {
        User result = userMapper.findByUid(uid);
        if (result == null || result.getIsDelete() == 1) {
            throw new UserNotFoundException("user not found!");
        }
        //?????????????§Ö???????§Ò??
        String oldMd5Password = getMD5Password(oldPassword, result.getSalt());
        if (!oldMd5Password.equals(result.getPassword())) {
            throw new PasswordNotMatchException("wrong password !");
        }

        //?????????????????????,?????????

        String newMd5Password = getMD5Password(newPassword, result.getSalt());
        Integer rows = userMapper.updatePasswordByUid(uid, newMd5Password, username, new Date());

        if (rows != 1) {
            throw new UpdateException("change failed!");
        }
    }

    @Override
    public User getByUid(Integer uid) {
        User result = userMapper.findByUid(uid);
        if (result == null || result.getIsDelete() == 1) {
            throw new UserNotFoundException("user not found!");
        }

        // ???????User????
        User user = new User();
        // ????????????§Ö?username/phone/email/gender???????User??????
        user.setUsername(result.getUsername());
        user.setPhone(result.getPhone());
        user.setEmail(result.getEmail());
        user.setGender(result.getGender());
        user.setAvatar(result.getAvatar());
        // ???????User????
        return user;
    }

    @Override
    public void changeInfo(Integer uid, String username, User user) {
        User result = userMapper.findByUid(uid);
        if (result == null || result.getIsDelete() == 1) {
            throw new UserNotFoundException("user not found!");
        }
        // ?????user?§Ó???????uid
        user.setUid(uid);
        // ?????user?§Ó???????modifiedUser(username)
        user.setModifiedUser(username);
        // ?????user?§Ó???????modifiedTime(new Date())
        user.setModifiedTime(new Date());
        // ????userMapper??updateInfoByUid(User user)?????????????????????
        Integer rows = userMapper.updateInfoByUid(user);

        // ?§Ø??????????????????????1
        if (rows != 1) {
            // ??????UpdateException??
            throw new UpdateException("update failed!");
        }

    }

    @Override
    public void changeAvatar(Integer uid, String username, String avatar) {
        User result = userMapper.findByUid(uid);
        if (result == null || result.getIsDelete() == 1) {
            throw new UserNotFoundException("user not found!");
        }
        Integer rows = userMapper.updateAvatarByUid(uid, avatar, username, new Date());
        if (rows != 1) {
            throw new UpdateException("update failed!");
        }
    }


    //???????MD5??????
    private String getMD5Password(String Password, String salt) {
        //md5?????????????¦Ì???
        for (int i = 0; i < 3; i++) {
            Password = DigestUtils.md5DigestAsHex((salt + Password + salt).getBytes()).toUpperCase();
        }
        return Password;
    }
}
